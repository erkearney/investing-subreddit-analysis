'''
Uses Yahoo Finance to download historic stock market data over a given date
range. The data will be written out to files named <NASDAQ_SYMBOL>.csv in
a data directory. (ex: the data for Apple will be written to data/AAPL.csv)

Usage examples
---------------
$python collect_stock_data.py -s 2020-01-01 -e 2021-01-01
    collects stock data from January 1st 2020 to January 1st 2021

$python collect_stock_data.py -p 5y
    collects stock data from 5 years ago to today

Defaults
--------
If no arguments are passed when collect_stock_data is called, the period
will be set to one month

Methods
-------
validate_args() -> str
collect_symbols() -> List
collect_data() -> None
'''
import os
import argparse
import pandas as pd
import yfinance as yf

parser = argparse.ArgumentParser(description='Download Yahoo Finance stock '\
    'data. WARNING: This script may take a very long time to run.')
parser.add_argument('-s', '--start',
    help='Date to start collecting data (YYYY-MM-DD ex: 2017-01-01)')
parser.add_argument('-e', '--end',
    help='Date to end collecting data (YYYY-MM-DD ex: 2017-04-30)')
parser.add_argument('-p', '--period',
    help='How far back to collect data, use instead of start and end '\
        '(options: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max), default:1mo')
parser.add_argument('-v', '--verbose', action='store_true', help='Be verbose')
parser.add_argument('-d', '--debug', action='store_true',
    help='Enter debug mode')
args = parser.parse_args()


def validate_args():
    '''
    collect_stock_data.py should be called with either a start and end date
    (using the -s and -e flags, respectively), or with a period (using the -p
    flag). These set the date range to collect stock data over. See module
    docstring for examples. This method ensures the arguments were passed
    correct

    Returns
    -------
    date_range : str OR tuple(<str>, <str>)
        date_range will either be a single string when -p was used, or a tuple
        containing the start and end dates when -s and -e were used
    '''
    if args.start and not args.end:
        parser.error('ERROR: You must specify an end date with --end, '\
            'or use --period.')
    elif args.end and not args.start:
        parser.error('ERROR: You must specify a start date with --start, '\
            'or use --period.')
    elif args.start and args.end:
        if args.start > args.end:
            parser.error(f'ERROR: Your start date: {args.start} is after '\
                f'your end date: {args.end}')
        else:
            date_range = (args.start, args.end)
    elif args.period:
        if args.period not in ['1d', '5d', '1mo', '3mo', '6mo', '1y', '5y', '10y', 'ytd', 'max']:
            parser.error('ERROR: period must be '\
                f'1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max, got {args.period}.')
        date_range = args.period
    else:
        date_range = '1mo' # DEFAULT

    return date_range


def collect_symbols():
    '''
    Downloads NASDAQ symbols (ex: 'AAPL' for 'Apple') and cleans the dataset.
    Creates a file in the data directory containing each stock's NASDAQ symbol
    as well as the full name of that company. The full name portion is
    currently unused in this overall project, but may be useful in a future
    iteration where the pre-processing is improved

    Returns
    -------
    symbols : List<str>
        A list containing the NASDAQ symbol for each stock
    '''
    data = pd.read_csv('https://www.nasdaqtrader.com/dynamic/SymDir/nasdaqtraded.txt', sep='|')
    if args.debug:
        data = data.head(10)
    data_clean = data[data['Test Issue'] == 'N']
    symbols = data_clean['NASDAQ Symbol'].tolist()
    names = data_clean['Security Name'].tolist()
    with open('data/symbols_names.csv', 'w') as f:
        for pair in zip(symbols, names):
            f.write(f'{pair[0]}, {pair[1]}\n')

    if args.verbose:
        print(f'Total number of symbols: {len(symbols)}')

    return symbols


def collect_data(symbols, date_range):
    '''
    Download historic stock market data for each symbol returned by
    collect_symbols(), for each symbol, create a new csv file in the
    data/stock_data/ directory called <SYMBOL>.csv (ex: for Apple, this file
    will be data/stock_data/AAPL.csv

    Paramters
    ---------
    symbols : List<str>
        The list of symbols generated by collect_symbols()

    date_range : str OR tuple(<str>, <str>)
        The date range returned by validate_args()


    Outputs
    -------
    csv file for each stock
    '''
    if not os.path.exists('data/stock_data'):
        if args.verbose:
            print('stock data directory not found, creating a new one')
        os.mkdir('data/stock_data')

    if isinstance(date_range, tuple):
        start, end = date_range
        if args.verbose:
            print(f'Collecting data from {start} to {end}')
        for symbol in symbols:
            try:
                data = yf.download(symbol, start=start, end=end)

                data.to_csv(f'data/stock_data/{symbol}.csv')
            except:
                print(f'Symbol {symbol} appears to be broken, ignoring')
                continue
    else:
        if args.verbose:
            print(f'Collecting data over a period of {date_range}')
        for symbol in symbols:
            try:
                data = yf.download(symbol, period=date_range)

                data.to_csv(f'data/stock_data/{symbol}.csv')
            except:
                print(f'Symbol: {symbol} appears to be broken, ignoring')
                continue


if __name__ == '__main__':
    if not os.path.exists('data/'):
        if args.verbose:
            print('data directory not found, creating a new one')
        os.mkdir('data/')
    date_range = validate_args()
    symbols = collect_symbols()
    collect_data(symbols, date_range)
